STM32F103RB
可用GPIO：GPIOA ~ GPIOC
可用定时器：TIM1 高级定时器    TIM2~TIM4 通用定时器
1.精确延时利用SysTick实现
2.考虑到STM32103RBT6只有16位定时器，任务调度使用SysTick实现,同时修改了精确延时的代码
3.查询文档发现，Systick的优先级最低，手动将其调到最高，会不会影响时序，需要具体测试
说明:该程序使用Systick来确定任务调度的基准时间，TIM2来跑高级任务，TIM3输出一种频率的PMW,TIM4用来测编码器
注意：在没有初始化完毕时,还没法使用精确延时函数,如果一定要使用,请将要初始化的函数移到EnableInterrupts之后

难点：											解决方法：
1.SD卡只能存整数，存浮点数需要处理------------->开启缓冲区，将浮点数转换为整数之后存储
2.SD卡存数据的时候会有丢失--------------------->加入校验位，进行多次存储
3.需要存的数据过多，一个数据块存不下----------->重构代码，使之可以连续存块
4.单片机如果突然掉电，开机之后会数据丢失------->如果突然掉电，重新开机之后在OLED上进行提示，并进行选择
5.OLED屏幕显示的信息有限----------------------->引入事件的概念，对于不同的事件，OLED有不同的显示，并且可以用按键进行交互，在事件间可以转换
6.索引数据的时候，需要引入SD卡数据------------->将写缓冲区与读缓冲区分开，写数据与读数据互不干扰
7.索引数据OLED交互时存在显示问题--------------->在边界区域进行单独处理，保证数据显示正确


存储144×7 = 1008个double数据
由于一个扇区是512字节,最多存储64个double数据,但是实际处理的时候将double数据按照4个字节存储,因为整数部分不会很大,这样做节省了空间
所以一个扇区最多存128个数据

2017.1.17晚---->已完成
存储思路：
1.分为存命令和存数据，命令存在扇区0里面,每次开机时读一次,判断是否有以前的数据
  如果有数据,OLED进行提示,按键选择继续储存还是从头存
2.存数据,由于一个扇区最多存128个数据,需要存储的数据很多,所以没存满一个扇区,切换到下一个扇区

以下引脚不可用：
晶振引脚：
PC14
PC15
PD0
PD1

BOOT1 
PB2

Jlink:
PA13
PA14
PA15
PB3
PB4

SW
PA13
PA14

外设接口：
1.LED 
LED0  PA8
LED1  PD2

2.Key 换成 PC6  PC7   不要用到SW或者Jlink引脚，否则无法调试
Key0  PA13
Key1  PA15

3.USART
RXD   PA10
TXD   PA9

4.OLED
CS    PB9
DC    PB7
RES   PB8
SDIN  PB5
SCLK  PB6

5.SD卡-->SPI硬件接口----注意和一路PWM输出冲突
SPI_CS   PA3
SPI_SCK  PA5
SPI_MISO PA6
SPI_MOSI PA7


